<!DOCTYPE html>
<html lang="en-US">
<head>
		<!--[if lt IE 9]>
	<script src="https://www.dataquest.io/wp-content/themes/ignition/js/html5/dist/html5shiv.js"></script>
	<script src="//css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"></script>
	<![endif]-->
	<!--[if IE 8]>
	<link rel="stylesheet" type="text/css" href="https://www.dataquest.io/wp-content/themes/ignition/css/ie8.css"/>
	<![endif]-->
	<!--[if IE 7]>
	<link rel="stylesheet" type="text/css" href="https://www.dataquest.io/wp-content/themes/ignition/css/ie7.css"/>
	<![endif]-->
	<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
	<meta charset="UTF-8">
	
			<link rel="stylesheet" href="https://use.typekit.net/nmj4kuc.css">


			<title>Python List Tutorial: Lists, Loops, and More! &ndash; Dataquest</title>

<!-- This site is optimized with the Yoast SEO Premium plugin v12.5.1 - https://yoast.com/wordpress/plugins/seo/ -->
<meta name="description" content="Learn how to master lists with this Python list tutorial. Analyze app store data and learn how to use loops to automate repetitive tasks."/>
<meta name="robots" content="max-snippet:-1, max-image-preview:large, max-video-preview:-1"/>
<link rel="canonical" href="https://www.dataquest.io/blog/python-list-tutorial/" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Python List Tutorial: Lists, Loops, and More! &ndash; Dataquest" />
<meta property="og:description" content="Learn how to master lists with this Python list tutorial. Analyze app store data and learn how to use loops to automate repetitive tasks." />
<meta property="og:url" content="https://www.dataquest.io/blog/python-list-tutorial/" />
<meta property="og:site_name" content="Dataquest" />
<meta property="article:publisher" content="https://www.facebook.com/dataquestio" />
<meta property="article:tag" content="append" />
<meta property="article:tag" content="beginner tutorial" />
<meta property="article:tag" content="list of lists" />
<meta property="article:tag" content="list tutorial" />
<meta property="article:tag" content="python list" />
<meta property="article:tag" content="python tutorial" />
<meta property="article:section" content="Data Science Tutorials" />
<meta property="article:published_time" content="2019-11-15T09:36:53-08:00" />
<meta property="og:image" content="https://www.dataquest.io/wp-content/uploads/2019/07/learn-python-tutorials.jpg" />
<meta property="og:image:secure_url" content="https://www.dataquest.io/wp-content/uploads/2019/07/learn-python-tutorials.jpg" />
<meta property="og:image:width" content="1920" />
<meta property="og:image:height" content="1080" />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:description" content="Learn how to master lists with this Python list tutorial. Analyze app store data and learn how to use loops to automate repetitive tasks." />
<meta name="twitter:title" content="Python List Tutorial: Lists, Loops, and More! &ndash; Dataquest" />
<meta name="twitter:site" content="@dataquestio" />
<meta name="twitter:image" content="https://www.dataquest.io/wp-content/uploads/2019/07/learn-python-tutorials.jpg" />
<meta name="twitter:creator" content="@dataquestio" />
<script type='application/ld+json' class='yoast-schema-graph yoast-schema-graph--main'>{"@context":"https://schema.org","@graph":[{"@type":"Organization","@id":"https://www.dataquest.io/#organization","name":"Dataquest","url":"https://www.dataquest.io/","sameAs":["https://www.facebook.com/dataquestio","https://www.linkedin.com/company/dataquest-io","https://twitter.com/dataquestio"],"logo":{"@type":"ImageObject","@id":"https://www.dataquest.io/#logo","url":"https://www.dataquest.io/wp-content/uploads/2019/01/Logo-On-Light-BLUE.png","width":2001,"height":427,"caption":"Dataquest"},"image":{"@id":"https://www.dataquest.io/#logo"}},{"@type":"WebSite","@id":"https://www.dataquest.io/#website","url":"https://www.dataquest.io/","name":"Dataquest","publisher":{"@id":"https://www.dataquest.io/#organization"},"potentialAction":{"@type":"SearchAction","target":"https://www.dataquest.io/?s={search_term_string}","query-input":"required name=search_term_string"}},{"@type":"ImageObject","@id":"https://www.dataquest.io/blog/python-list-tutorial/#primaryimage","url":"https://www.dataquest.io/wp-content/uploads/2019/07/learn-python-tutorials.jpg","width":1920,"height":1080,"caption":"python tutorials for data science"},{"@type":"WebPage","@id":"https://www.dataquest.io/blog/python-list-tutorial/#webpage","url":"https://www.dataquest.io/blog/python-list-tutorial/","inLanguage":"en-US","name":"Python List Tutorial: Lists, Loops, and More! &ndash; Dataquest","isPartOf":{"@id":"https://www.dataquest.io/#website"},"primaryImageOfPage":{"@id":"https://www.dataquest.io/blog/python-list-tutorial/#primaryimage"},"datePublished":"2019-11-15T09:36:53-08:00","dateModified":"2019-11-15T09:36:53-08:00","description":"Learn how to master lists with this Python list tutorial. Analyze app store data and learn how to use loops to automate repetitive tasks."},{"@type":"Article","@id":"https://www.dataquest.io/blog/python-list-tutorial/#article","isPartOf":{"@id":"https://www.dataquest.io/blog/python-list-tutorial/#webpage"},"author":{"@id":"https://www.dataquest.io/#/schema/person/54c1172c792879ccebbb1aecafa3e133"},"headline":"Python List Tutorial: Lists, Loops, and More!","datePublished":"2019-11-15T09:36:53-08:00","dateModified":"2019-11-15T09:36:53-08:00","commentCount":0,"mainEntityOfPage":{"@id":"https://www.dataquest.io/blog/python-list-tutorial/#webpage"},"publisher":{"@id":"https://www.dataquest.io/#organization"},"image":{"@id":"https://www.dataquest.io/blog/python-list-tutorial/#primaryimage"},"keywords":"append,beginner tutorial,list of lists,list tutorial,python list,python tutorial","articleSection":"Data Science Tutorials"},{"@type":["Person"],"@id":"https://www.dataquest.io/#/schema/person/54c1172c792879ccebbb1aecafa3e133","name":"Josh Devlin","image":{"@type":"ImageObject","@id":"https://www.dataquest.io/#authorlogo","url":"https://secure.gravatar.com/avatar/488062fe3e2d6bbf1da752fa6d89c37f?s=96&d=identicon&r=g","caption":"Josh Devlin"},"description":"Data Scientist at Dataquest.io. Loves Data and Aussie Rules Football. Australian living in Texas.","sameAs":[]}]}</script>
<!-- / Yoast SEO Premium plugin. -->

<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="Dataquest &raquo; Python List Tutorial: Lists, Loops, and More! Comments Feed" href="https://www.dataquest.io/blog/python-list-tutorial/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/12.0.0-1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/12.0.0-1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.dataquest.io\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.3"}};
			!function(e,a,t){var r,n,o,i,p=a.createElement("canvas"),s=p.getContext&&p.getContext("2d");function c(e,t){var a=String.fromCharCode;s.clearRect(0,0,p.width,p.height),s.fillText(a.apply(this,e),0,0);var r=p.toDataURL();return s.clearRect(0,0,p.width,p.height),s.fillText(a.apply(this,t),0,0),r===p.toDataURL()}function l(e){if(!s||!s.fillText)return!1;switch(s.textBaseline="top",s.font="600 32px Arial",e){case"flag":return!c([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])&&(!c([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!c([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]));case"emoji":return!c([55357,56424,55356,57342,8205,55358,56605,8205,55357,56424,55356,57340],[55357,56424,55356,57342,8203,55358,56605,8203,55357,56424,55356,57340])}return!1}function d(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(i=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},o=0;o<i.length;o++)t.supports[i[o]]=l(i[o]),t.supports.everything=t.supports.everything&&t.supports[i[o]],"flag"!==i[o]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[i[o]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(r=t.source||{}).concatemoji?d(r.concatemoji):r.wpemoji&&r.twemoji&&(d(r.twemoji),d(r.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='wp-block-library-css'  href='https://www.dataquest.io/wp-includes/css/dist/block-library/style.min.css?ver=5.3' type='text/css' media='all' />
<link rel='stylesheet' id='searchandfilter-css'  href='https://www.dataquest.io/wp-content/plugins/search-filter/style.css?ver=1' type='text/css' media='all' />
<link rel='stylesheet' id='bodhi-svgs-attachment-css'  href='https://www.dataquest.io/wp-content/plugins/svg-support/css/svgs-attachment.css?ver=5.3' type='text/css' media='all' />
<link rel='stylesheet' id='tve_style_family_tve_flt-css'  href='https://www.dataquest.io/wp-content/plugins/thrive-visual-editor/editor/css/thrive_flat.css?ver=2.4.5.1' type='text/css' media='all' />
<link rel='stylesheet' id='tve_leads_forms-css'  href='//www.dataquest.io/wp-content/plugins/thrive-leads/editor-layouts/css/frontend.css?ver=2.2.6.1' type='text/css' media='all' />
<link rel='stylesheet' id='l2h_style-css'  href='https://www.dataquest.io/wp-content/plugins/latex2html/inc/css/latex.min.css?ver=2.3.7' type='text/css' media='screen, print' />
<link rel='stylesheet' id='l2h_print_style-css'  href='https://www.dataquest.io/wp-content/plugins/latex2html/inc/css/print.min.css?ver=2.3.7' type='text/css' media='print' />
<link rel='stylesheet' id='jquery-data-tables-css'  href='https://www.dataquest.io/wp-content/plugins/posts-data-table/assets/js/datatables/datatables.min.css?ver=1.10.18' type='text/css' media='all' />
<link rel='stylesheet' id='posts-data-table-css'  href='https://www.dataquest.io/wp-content/plugins/posts-data-table/assets/css/posts-data-table.min.css?ver=1.3' type='text/css' media='all' />
<link rel='stylesheet' id='ignition-style-css'  href='https://www.dataquest.io/wp-content/themes/ignition-child/style.css?ver=1.401.2.1550684985' type='text/css' media='all' />
<link rel='stylesheet' id='thrive-reset-css'  href='https://www.dataquest.io/wp-content/themes/ignition/css/reset.css' type='text/css' media='all' />
<link rel='stylesheet' id='thrive-main-style-css'  href='https://www.dataquest.io/wp-content/themes/ignition/css/main_navy.css?ver=2014123' type='text/css' media='all' />
<link rel='stylesheet' id='chld_thm_cfg_separate-css'  href='https://www.dataquest.io/wp-content/themes/ignition-child/ctc-style.css?ver=1.401.2.1550684985' type='text/css' media='all' />
<link rel='stylesheet' id='thrive-apprentice-style-css'  href='https://www.dataquest.io/wp-content/themes/ignition/appr/css/apprentice_green.css?ver=20120208' type='text/css' media='all' />
<link rel='stylesheet' id='prism-theme-css'  href='https://www.dataquest.io/wp-content/plugins/ank-prism-for-wp/out/prism-css.min.css?ver=1550607458' type='text/css' media='all' />
<script type='text/javascript'>
/* <![CDATA[ */
var THO_Head = {"variations":[],"post_id":"21420","element_tag":"thrive_headline","woo_tag":"tho_woo"};
/* ]]> */
</script>
<script type='text/javascript' src='https://www.dataquest.io/wp-content/plugins/thrive-headline-optimizer/frontend/js/header.min.js?ver=1.2.0'></script>
<script type='text/javascript' src='https://www.dataquest.io/wp-includes/js/jquery/jquery.js'></script>
<script type='text/javascript' src='https://www.dataquest.io/wp-includes/js/jquery/jquery-migrate.min.js'></script>
<link rel='https://api.w.org/' href='https://www.dataquest.io/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.dataquest.io/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.dataquest.io/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.3" />
<link rel='shortlink' href='https://www.dataquest.io/?p=21420' />
<link rel="alternate" type="application/json+oembed" href="https://www.dataquest.io/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.dataquest.io%2Fblog%2Fpython-list-tutorial%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://www.dataquest.io/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.dataquest.io%2Fblog%2Fpython-list-tutorial%2F&#038;format=xml" />
<style type="text/css" id="tve_global_variables">:root{--tcb-color-0:rgb(35, 42, 61);--tcb-color-1:rgb(132, 132, 157);--tcb-color-2:rgb(77, 127, 223);--tcb-color-3:rgb(97, 209, 153);--tcb-color-4:rgb(0, 0, 0);--tcb-color-5:rgb(0, 0, 0);--tcb-color-6:rgb(0, 0, 0);--tcb-color-7:rgb(212, 212, 212);--tcb-color-8:rgb(137, 138, 142);--tcb-color-9:rgb(242, 243, 247);--tcb-color-10:rgba(35, 42, 61, 0.77);--tcb-color-11:rgb(97, 209, 153);--tcb-color-12:rgb(255, 255, 255);--tcb-color-13:rgb(35, 42, 61);--tcb-gradient-0:linear-gradient(90deg, rgb(97, 209, 153) 0%, rgb(78, 126, 222) 98%);}</style>	<script>
		/************* Helper functions ******************/
		function isInArray(value, array) {
		  return array.indexOf(value) > -1;
		}
		function getHostFromUrl(url) {
			var a=document.createElement('a');
			a.href=url;
			return a.hostname;
		}
		function getUrlVar(key){
			var result = new RegExp(key + "=([^&]*)", "i").exec(window.location.search); 
			return result && unescape(result[1]) || ""; 
		}
		/************* End of Helper Functions ******************/
		
		
		/******************** Cookie helper functions ************************/
		function checkCookieExists(cookie_name) {
			return document.cookie.indexOf(cookie_name + '=') !== -1;
		}
		function setCookie(name,value,domain,days) {
			var expires = "";
			if (days) {
				var date = new Date();
				date.setTime(date.getTime() + (days*24*60*60*1000));
				expires = "; expires=" + date.toUTCString();
			}
			document.cookie = name + "=" + (value || "")  + expires +  ";domain=" + domain + "; path=/";
		}
		/******************** End Of Cookie helper functions ******************/
		
		function setRefererUrlCookie() {
			var cookie_domain = '.dataquest.io'
			var internal_hosts =  ['www.dataquest.io', 'dataquest.io', ]

			/* Set Landing page cookie if it doesnot exist */
			if (!checkCookieExists('dataquest-cac-landing-page')) {
				setCookie('dataquest-cac-landing-page', window.location.pathname, cookie_domain, 7)
			}
			
			var referrer = document.referrer
			if (!referrer) {
				return
			}
			host = getHostFromUrl(referrer)
			
			/* If referrer is not coming from dataquest, set it in cookie and override landing_page cookie */
			if (!isInArray(host, internal_hosts)) {
				setCookie('dataquest-cac-referer-url', referrer, cookie_domain, 365)
				setCookie('dataquest-cac-landing-page', window.location.pathname, cookie_domain, 365)
			}
		}

		function setUTMCodesCookies() {
			var utm_codes = ['utm_source','utm_campaign','utm_content','utm_term','utm_medium']
			var cookie_prefix = 'dataquest-cac-'
			var cookie_domain = '.dataquest.io'
			
			for (code in utm_codes) {
				var utm_code = utm_codes[code]
				var code_value = getUrlVar(utm_code)
				var cookie_name = cookie_prefix + utm_code.replace('_', '-')
				
				if (code_value) {
					setCookie(cookie_name, code_value, cookie_domain, 365)
				}
			}
		}
									
		
		function setLandingPageLastTouchCookie() {
			var cookie_domain = '.dataquest.io'
			setCookie('dataquest-cac-landing-page-last-touch', window.location.pathname, cookie_domain, 365)

		}
		
		setUTMCodesCookies()
		setRefererUrlCookie()
		setLandingPageLastTouchCookie()

	</script>
<style>
.latex_thm, .latex_lem, .latex_cor, .latex_defn, .latex_prop, .latex_rem{
  margin:0;padding:5px;
  background: lightcyan;
  border: solid 3px green;
  -moz-border-radius: 1.0em;
  -webkit-border-radius: 7px;
  box-shadow: 0 0 0 green;
}
.latex_em{
  font-style: italic;
}
.bibtex_title{
  font-weight:bold;
  color: #004b33;
}
a.bibtex_title{
  text-decoration: none;
}
.latex_proof::after{
  content: "\220E";
  color: gray;
  text-align: right;
  display: block;
  font-size: 1.2em;
}
</style>
        <style type="text/css">
            .hidden {display:none;}
        </style>
        <script type="text/javascript">
         jQuery('html').addClass('hidden');
	            
	 jQuery(document).ready(function($) {		            
	    $('html').removeClass('hidden');	            
	 });  
        </script>
    		<style type="text/css">body { background:#ffffff; }.cnt article h1.entry-title a { color:#0a0a0a; }.cnt article h2.entry-title a { color:#0a0a0a; }.bSe h1 { color:#0a0a0a; }.bSe h2 { color:#0a0a0a; }.bSe h3 { color:#0a0a0a; }.bSe h4 { color:#0a0a0a; }.bSe h5 { color:#0a0a0a; }.bSe h6 { color:#0a0a0a; }.cnt article p { color:#0a0a0a; }.cnt .bSe article { color:#0a0a0a; }.cnt article h1 a, .tve-woocommerce .bSe .awr .entry-title, .tve-woocommerce .bSe .awr .page-title{font-family:Open Sans,sans-serif;}.bSe h1{font-family:Open Sans,sans-serif;}.bSe h2,.tve-woocommerce .bSe h2{font-family:Open Sans,sans-serif;}.bSe h3,.tve-woocommerce .bSe h3{font-family:Open Sans,sans-serif;}.bSe h4{font-family:Open Sans,sans-serif;}.bSe h5{font-family:Open Sans,sans-serif;}.bSe h6{font-family:Open Sans,sans-serif;}.cnt, .bp-t, .tve-woocommerce .product p, .tve-woocommerce .products p{font-family:Open Sans,sans-serif;font-weight:400;}article strong {font-weight: bold;}.bSe h1, .bSe .entry-title { font-size:36px; }.cnt { font-size:14px; }.out { font-size:14px; }.thrivecb { font-size:14px; }.aut p { font-size:14px; }.cnt p { line-height:2em; }.lhgh { line-height:2em; }.dhgh { line-height:2em; }.dhgh { font-size:14px; }.lhgh { font-size:14px; }.thrivecb { line-height:2em; }.cnt .cmt, .cnt .acm { background-color:#4d7fdf; }.trg { border-color:#4d7fdf transparent transparent; }.str { border-color: transparent #4d7fdf transparent transparent; }.brd ul li { color:#4d7fdf; }.bSe a { color:#4d7fdf; }.bSe .faq h4{font-family:Open Sans,sans-serif;font-weight:400;}article strong {font-weight: bold;}header ul.menu > li > a { color:#ffffff; }header .phone .apnr, header .phone .apnr:before, header .phone .fphr { color:#ffffff; }header ul.menu > li > a:hover { color:#ffffff; }header .phone:hover .apnr, header .phone:hover .apnr:before, header .phone:hover .fphr { color:#ffffff; }header nav > ul > li.current_page_item > a:hover { color:#ffffff; }header nav > ul > li.current_menu_item > a:hover { color:#ffffff; }header nav > ul > li.current_menu_item > a:hover { color:#ffffff; }header nav > ul > li > a:active { color:#ffffff; }header #logo > a > img { max-width:180px; }header ul.menu > li.h-cta > a { color:#FFFFFF!important; }header ul.menu > li.h-cta >a  { background:#ffffff; }header ul.menu > li.h-cta > a { border-color:#ffffff; }header ul.menu > li.h-cta > a:hover { color:#FFFFFF!important; }header ul.menu > li.h-cta > a:hover { background:#ffffff; }.product.woocommerce.add_to_cart_inline a.button.product_type_simple.ajax_add_to_cart { background-color:#FFFFFF; }.product.woocommerce.add_to_cart_inline a.button.product_type_simple.ajax_add_to_cart { border-color:#4d7fdf; }.product.woocommerce.add_to_cart_inline a.button.product_type_simple.ajax_add_to_cart { color:#4d7fdf; }.product.woocommerce.add_to_cart_inline a.button.product_type_simple.ajax_add_to_cart:hover { background-color:#4d7fdf; }.woocommerce p.return-to-shop a.button.wc-backward { border-color:#4d7fdf; }.woocommerce p.return-to-shop a.button.wc-backward { color:#4d7fdf; }.woocommerce p.return-to-shop a.button.wc-backward:hover { background:#4d7fdf; }.woocommerce p.return-to-shop a.button.wc-backward:hover { color:#FFFFFF; }</style>
		<style type="text/css" id="custom-background-css">
body.custom-background { background-color: #ffffff; }
</style>
	<link rel="icon" href="https://www.dataquest.io/wp-content/uploads/2019/01/cropped-rocket-icon-50x50.jpg" sizes="32x32" />
<link rel="icon" href="https://www.dataquest.io/wp-content/uploads/2019/01/cropped-rocket-icon-300x300.jpg" sizes="192x192" />
<link rel="apple-touch-icon-precomposed" href="https://www.dataquest.io/wp-content/uploads/2019/01/cropped-rocket-icon-300x300.jpg" />
<meta name="msapplication-TileImage" content="https://www.dataquest.io/wp-content/uploads/2019/01/cropped-rocket-icon-300x300.jpg" />
		<style type="text/css" id="wp-custom-css">
			body  {font-family: ingra, sans-serif; color: #232a3d;}

button, input, select, textarea, h4, h5, h6, .widget-area.sidebar, nav, p, .thrv-styled-list-item, .bSe h4, ol li, ul li  {font-family: ingra, sans-serif; font-weight: 300; color: #232a3d; }

.single-post article, .single-post article ul li, .single-post article p, .single-post article blockquote, .single-post article ol li {line-height: 1.8em; font-size: 15px; font-family: merriweather;}

.page-template-fullwidth-page p, .page-template-default p, .page-template-default ul li, .page-template-default ol li {font-family: ingra, sans-serif; line-height: 1.7em; margin: 0px 0px; font-size: 16px; color: #232a3d!important; font-weight: 300;}

.tcb-button-text {font-family: industry, sans-serif!important; font-weight: 700; letter-spacing: 1px;}

h1, h2, h3 {font-family: industry, sans-serif!important; color: #232a3d!important; font-weight: 700!important;}

.bSe h1 {font-size: 36px!important;}

.scn>ul a:hover, section[id*='nav_menu-'] .scn ul a:hover, .scn ul[id*='menu'] a:hover {margin: 0px;}

.path-box h3 {font-size: 17px!important; font-weight: 900; margin: 0px 0px 5px 0px; line-height: 1em}

.path-box p {line-height: 1.6em; font-size: 14px;}

.path-box a {text-decoration: none!important;}

.path-box-button-text {text-transform: uppercase!important; letter-spacing: 1px;}


.post-template-default h1, .post-template-default h2, .post-template-default h3 {padding: 40px 0px 20px}

.post-template-default h4, .post-template-default h5, .post-template-default h6 {padding: 10px 0px 20px}


#floating_menu header {padding: 2px!important; height: 58px!important;
}

header {border-bottom: 0px!important;}


.menu, .page_item a, .menu-item a {font-size: 11px; text-transform: UPPERCASE; text-decoration: none; font-weight: 100; line-height: 1em;}

header #logo > a > img {padding: 10px 0px 10px 0px;}

header nav>ul>li.menu-item-has-children:hover>a:after, 
header nav>ul>li.menu-item-has-children>a:after {color: #ffffff!important; font-weight: 100; }

header nav>ul.menu li.current-menu-item>a, header nav>ul.menu li.current_page_item>a, header nav ul#menu li.current-menu-item>a, header nav ul#menu li.current_page_item>a {color: #ffffff;}

header nav li.col-no-4>ul.sub-menu, header nav li.col-no-4 ul.sub-menu.position_menu {margin-top: 20px;}

header nav>ul>li.menu-item-has-children>a:after {display: none;}

header nav li.has-extended>ul.sub-menu {background: #ffffff;}

header nav li.has-extended>ul.sub-menu li.menu-item {background: transparent; }

header nav li.has-extended>ul.sub-menu li.menu-item a[href] {color: #232a3d;}

header nav li.has-extended>ul.sub-menu li.menu-item a[href]:hover {color: #4d7fdf; background-color: rgb(242, 243, 247);}

#menu-item-11096 a.colch {padding: 18px 8px 8px 8px; font-size: 14px; font-weight: 900;}

#menu-item-11069 a.colch, #menu-item-11053 a.colch, #menu-item-11054 a.colch {color: #ffffff;}
 

li.has-extended>ul.sub-menu>li ul.sub-menu li {margin: 0px 0px 0px 0px;}

header nav li.has-extended>ul.sub-menu>li ul.sub-menu li a {line-height: 1.6em; padding: 10px 0px 10px 10px; font-size: 12px;}

@media only screen and (max-width: 769px) {
	header .hmn .rmn {background-image: none; border: 0px; }
}

@media only screen and (min-width: 769px) {
	#menu-item-20221 a {background-color: #61D199; border-radius: 5px;  padding: 6px 8px 5px; margin-top: -6px;}}

@media only screen and (max-width: 768px) {
	header nav li.has-extended ul.sub-menu li a {display: none;} 

li#menu-item-11094	ul.sub-menu {display: none!important;}
}


.csbwfs-social-widget {
    z-index: 100!important;
}

.page-template-default .csbwfs-social-widget, .blog .csbwfs-social-widget {display: none;}

:not(pre) > code[class*="language-"], pre[class*="language-"] {background-color: #000000; border-radius: 3px;}

p code {
background-color: #e5eff5;
padding: 1px 3px;
border-radius: 3px;
font-size: .95em;
color: #000000;}

pre {background: #000000; margin-top: -10px;}
pre code {font-size: 13px; padding: 0px; color: #ffffff; background: #000000;}

code[class*="language-"], pre[class*="language-"] {font-size: 15px; margin-bottom: 20px; margin-top: -10px;}



.single-post table {width: 85%; margin: 30px auto; }

.single-post table th {background-color: #f4f8fb; /*text-transform: lowercase;*/ color: #232a3d!important;}

.single-post table td, article table th {font-size: 15px; border: 1px solid #e3ecf3; font-family: ingra, sans-serif; }

.single-post h1, .single-post h2, .single-post h3, .single-post h4, .single-post h5 {font-family: merriweather!important;}

.single-post .bSe h1.entry-title {font-size: 38px!important; color: #232a3d!important;}
.single-post h2 {font-size: 32px; color: #232a3d!important;}
.single-post h3 {font-size: 29px; color: #232a3d!important;}
.single-post h4 {font-size: 26px; color: #232a3d!important;}
.single-post h5 {font-size: 23px; color: #232a3d!important;}

.page-header .page-title {text-transform: none; color: #ffffff; font-weight: normal; letter-spacing: 0em; font-size: 18px; line-height: 24px;}


.widgets-list-layout-links  {line-height: 1.3; font-size: 14px}


.sidebar .widget .widget-title {font-family: ingra, sans-serif; letter-spacing: 1.5px; padding-bottom: 15px; border-top: 1px solid #e9e9e9!important; padding-top: 25px;}

.site-branding .site-title, .site-branding .site-text-logo {font-size: 20px; color: #ffffff; font-weight: normal; text-transform: none;}

#content img {display: block; margin: 0px auto;}

div table{
    overflow-x:auto;
}

.scn ul li a {color: #232a3d;}
.scn ul li a:hover {color: #4d7fdf;}


.err {text-align: center;}
.err h1 {display: none;}
.err h4 {display: none;}
form.lost {
	display: inline-block; width: 80%;}

.err .csc {text-align: left;}


.sAs .srh input.search-field, .sAs .srh .search_field {
	width: 285px;}

 .srh input.search-field,  .srh .search_field {background-color: #ffffff; box-shadow: none; border-top: 2px solid #31394a; border-left: 2px solid #31394a; border-bottom: 2px solid #31394a; border-right: 0px;}

input.search-field {font-size: 13px; line-height: 15px; padding: 10px;}

input.search-field::-webkit-input-placeholder { 
  color: transparent;
}
input.search-field::-moz-placeholder {
  color: transparent;
}
input.search-field:-ms-input-placeholder { /* IE 10+ */
  color: transparent;
}
	
input.search-field:-moz-placeholder {
  color: transparent;
}

form.srh {margin-left: 0px; padding-top: 5px; }

input.search-field, .search_field {font-size: 1em; font-weight: 100; }

input.search-field, .search-button, .submit_btn {
    height: 40px; margin: 0px; padding: 0px 0px 0px 5px;
	}

.search-button, .submit_btn {background-color: #31394a!important; background-image:none; border: none; height: 47px!important;}

.sAs .search-button, .sAs .submit_btn { 
    width: 50px; z-index: 1000; position: relative;  top: -47px; left: 292px; }

@media only screen and (max-width: 1080px) {
.sAs .search-button, .sAs .submit_btn { 
	width: 50px; z-index: 1000; position: relative;  top: -0px; left: 0px; }
	form.srh {margin-bottom: 20px;}
	
	.sAs .srh input.search-field, .sAs .srh .search_field {
    height: 43px;
}
}


svg.tcb-icon {
	color: #61d199; 
}

.gmt-edd-slack-row {
	text-align: center;
}

input#gmt_edd_slack_email {
  width: 280px;
	text-align: left;
	padding: 10px 30px 10px 15px; 
}

button.gmt-edd-slack-form-button {
font-size: 16px; line-height: 15px; padding: 14px 30px; background-color: #61D199; color: #ffffff;  margin: 5px 10px; border: 0px; border-radius: 3px; text-transform: uppercase; width: 250px;
}

.thrv_wrapper.thrv-pricing-table .tcb-pricing-table-box-container .tcb-pt-featured-box .tve-content-box-background {
    border-top-color: #61d199;
}


.tvo-set12-template.tve_teal .tvo-testimonial-quote {color: #4d7fdf!important;}

.tvo-set12-template.tve_teal .tvo-testimonial-name {color: #4d7fdf!important;}


.directory-coursebox p {margin-top: 0px; font-size: 14px; margin-bottom: 22px!important; }

.directory-coursebox .tcb--cols--2 {margin-top: 5px;}

.directory-course-label p {margin: 3px 0px; }

a .thrv-content-box p {color: #ffffff!important; text-decoration: none!important;}

@media only screen and (max-width: 769px) {
	.directory-coursebox .tcb--cols--2, .directory-coursebox .tcb--cols--2 p { text-align: center!important; }}

@media only screen and (max-width: 769px) {
	.directory-coursebox .tcb--cols--2 .directory-course-label p { margin-top: -20px;}}

@media only screen and (max-width: 769px) {
	.directory-coursebox .tcb--cols--2 .thrv-button a { margin-top: -20px;}}

.directory-coursebox .tcb-button-texts {padding: 0px 20px;}

@media only screen and (max-width: 767px){.thrv_wrapper.thrv-columns.directory-course-columns {margin-top: -40px;}}

.path-box-button-text p {font-family: industry!important; font-weight: 700;}

.course-box-course-info p {font-family: industry!important; font-weight: 700; font-size: 14px}

.course-box h2 {font-size: 22px;}

.course-box p {font-size: 13px;}

.course-box a {text-decoration: none!important;}

.scn.aut {
    box-shadow: none;
    background: #ffffff;
    border-radius: 5px;
    border: 2px solid #d4d4d4;
    margin-bottom: 10px;
}

.scn h5 {font-family: industry, sans-serif; font-weight: 900;}

.blog .awr h2.entry-title, .archive .awr h2.entry-title, .search .awr h2.entry-title  { font-size: 24px!important; font-weight: 900; line-height: 1.4em!important; margin-top: 10px; margin-bottom: 10px; font-family: ingra, serif!important; text-align: left;}
.cnt article h2.entry-title a {color: #232a3d!important;}

.cnt article h2.entry-title a:hover {color: #4d7fdf!important;}

.blog .awr .category a, .archive .awr .category a, .search .awr .category a {font-family: ingra, sans-serif; text-decoration: none; font-size: 13px; text-transform: uppercase; letter-spacing: 1px; font-weight: 300; line-height: 2em; }

.blog .awr p, .archive .awr p, .search .awr p {font-family: merriweather, serif!important; margin-bottom: 0px!important; line-height: 1.9em; color: #232a3d!important;}

.blog footer, .archive footer, .search footer  {margin: 5px!important;}




.cnt .rltp p, .cnt .rltp h5, .cnt .rltpi a p, .cnt .rltpi h5  {font-family: ingra, sans-serif;  font-weight: 500; font-size: 15px; color: #232a3d; }



.cnt .rltp p:before, .cnt .rltpi p:before {display: none;}

.cnt .rltp h5, .cnt .rltpi h5 {margin: 5px 0px;}

.cnt article ul {
    list-style: disc;
}



.cnt section footer {}



footer .ftw {background-color: #232a3d; padding: 40px 0px 0px 0px;}

footer .ftw ul li a, footer .ftw .textwidget  {color: #ffffff;  font-size: 12px;}

footer .copy {display: none;}

.tvo-set12-template.tvo-testimonials-display-single .tvo-testimonial-quote {font-family: industry!important; font-size: 168px!important; margin-left: -10px;}

.tvo-testimonials-display.tvo-set12-template .tvo-testimonial-display-item h4, .tvo-testimonials-display.tvo-set12-template .tvo-testimonial-display-item p {font-family: ingra!important;  font-size: 15px!important; font-weight: 100!important; font-style: normal!important; color: #0C0A48!important;}



.tvo-testimonial-info svg {display: none; }

.tvo-testimonial-info .tvo-testimonial-name, .tvo-testimonial-info .tvo-testimonial-role {
font-family: ingra!important;  font-size: 15px!important;
color: #232a3d!important;}

.tvo-testimonial-info .tvo-testimonial-name {font-weight: 700!important;;}



.tvo-set12-template.tvo-testimonials-display-single .tvo-testimonial-quote:before, .tvo-set12-template.tvo-testimonials-display-single .tvo-testimonial-quote:after {display: none;}

@media only screen and (min-width: 768px) {
	.why-p, .mission-two-columns {column-count: 2; column-gap: 40px; }}

.why-p p, .why-p ul li {font-size: 15px; margin-bottom: 20px!important; font-weight: 300;}

.gmt-edd-slack-alert-success {border: 1px solid #000000; padding: 20px; text-align: center;}

.sub-picker .tve_scT .tve_scTC {background: transparent; border: 0px;}

.sub-picker .tve_scT>ul li {border: 1px solid #cccccc; text-transform: capitalize; }

.sub-picker .tve_scT>ul li.annual {border-radius: 5px;}

.sub-picker .tve_scT>ul li.monthly {border-radius: 5px; margin-bottom: 5px!important;}

.thrv_wrapper.thrv-tabbed-content div.tve_scT>ul li span {width: 70px; font-size: 12px; font-family: industry; letter-spacing: 1px; line-height: 1em; }

.sub-picker ul.mon-ann {display: block; margin: auto auto!important; width: 200px; }

.sub-picker ul li.annual, .sub-picker ul li.monthly {padding: 10px!important; }

.thrv-pricing-table {margin-top: -40px}

.thrv_wrapper.thrv-tabbed-content div.tve_scT>ul li:hover {color: #232a3d; }

.main-testimonial .tvo-testimonials-display.tvo-set12-template .tvo-testimonial-display-item p {font-size: 20px!important;}

.mission-ppp-horizontal {display: none;}

.mission-outline p {font-size: 14px;  line-height: 1.6em; padding-top: 8px;}

.mission-outline br {line-height: 3em}

.mission-outline {column-count: 1; column-gap: 10px; }

.ctb {border: none;}
.ctb h5  {display: none;}

#comments {border: none;}

.cmc {margin: 0 auto 20px auto; }
.cmc .awe {display: none;}
.cmc, .cmc p {font-family: ingra!important; color: #232a3d!important; }

.cmb {margin: 0px;}

.lrp p {font-family: industry, sans-serif!important; font-size: 18px!important; color: #232a3d!important;}

textarea:not(.editor-post-title__input) {background: #ffffff; box-shadow: none; border: 2px solid #e9e9e9; }

.lrp input[type="submit"] {
    background: #61D199;
    border-radius: 5px;
	border: 0px;
    color: #ffffff;
    font-size: 1em;
    font-family: industry, sans-serif;
    margin: 20px 0;
    padding: 12px 36px 12px 36px;
    text-align: center;
}

.lrp input[type="text"] {
    box-sizing: border;
    border-radius: 5px;
	box-shadow: none;
    background: #ffffff;
    border: 1px solid #e9e9e9;
    color: #232a3d;
    float: left;
    font-size: 1em;
    font-weight: 700;
    font-family: ingra, sans-serif;
    height: 32px;
    margin: 0% 4.2% 3% 0%;
    padding: 0% 0% 0% 2%;
    width: 30.3%;
}

.lrp textarea::-webkit-input-placeholder {
   color:transparent;
}

.lrp textarea:-moz-placeholder { /* Firefox 18- */
   color:transparent; 
}

.lrp textarea::-moz-placeholder {  /* Firefox 19+ */
   color:transparent; 
}

.lrp textarea:-ms-input-placeholder {  
   color:transparent;
}

.footer-links a {color: #ffffff; line-height: 2}


#tve_tcb2_set-021 {display: none;}

a.tcb-button-link {background-color: #61D199; text-transform: uppercase; padding: 12px 30px; border-radius: 5px!important;}

a.tcb-button-link:hover {background-color: rgb(97, 209, 153) !important; }


.industry p {font-family: industry, sans-serif!important; }

body.home {background-color: #232a3d;}

.course-header p strong, .mission-header p strong, .mission-header .tcb-plain-text {font-size: 12px!important; letter-spacing: 3px;
    color: rgb(77, 127, 223) !important;}

.mission-header .tcb-plain-text {margin-bottom: 10px;}

.directory-coursebox h3 {margin-top: 5px}

.post-template-default .sidebar-blog-title h2 {font-family: industry!important; margin-top: -10px; margin-bottom: 0px;}

.post-template-default .sidebar-blog-subtitle { margin-bottom: 20px;}

#signup_form .error {
    display: block;
    line-height: .7em;
    padding: 0;
    color: #a94342;
    font-family: ingra,sans-serif;
    font-weight: 400;
	border: 1px solid #990000;
}


.cnt .sAs .ttl {font-family: industry; color: #31394a; border: 0px; margin-bottom: 0px; font-size: 22px; margin-left: 5px;}

section[id*='nav_menu-'] .scn ul li, .scn ul[id*='menu'] li {border-bottom: 0px; padding: 10px 0px; list-style-type: disc; margin-left: 40px; color: #31394a; font-family: ingra; letter-spacing: 1px;}

.scn ul li a {font-size: 13px;}

.scn>ul li:after, section[id*='nav_menu-'] .scn ul li:after, .scn ul[id*='menu'] li:after {content: none; }


.cnt .sAs>section {margin-bottom: 20px!important;}

#nav_menu-3 {margin-top: -20px;}

.cnt .sAs.right {border: 0px;}

.tve_flt .tve_contents_table .tve_ct_title {font-family: industry; text-align: left; display: block; margin: 0px ; padding: 0px 0px 10px; font-weight: bold; font-size: 24px;}

blockquote {
	padding: 20px;
	color: #428bca;
	border-left: 5px solid #428bca;
}

.sidebar-blog-title h2 {margin: 0px; padding: 10px}
		</style>
					</head>
<body class="post-template-default single single-post postid-21420 single-format-standard custom-background locale-en-us">

<div class="flex-cnt">
	<div id="floating_menu" >
				<header class="hbc" style="background-image:none; background-color:#232a3d">
						<div class="wrp side_logo clearfix has_phone" id="head_wrp">
				<div class="h-i">
																	<div id="logo"
							     class="left">
								<a class="lg" href="https://www.dataquest.io/">
									<noscript><img src="https://www.dataquest.io/wp-content/uploads/2019/01/dq-1.png"
									     alt="Dataquest"/></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://www.dataquest.io/wp-content/uploads/2019/01/dq-1.png"
									     alt="Dataquest"/>
								</a>
							</div>
																						<div class="hmn">
							<div class="awe rmn right">&#xf0c9;</div>
							<div class="clear"></div>
						</div>
						<div class="mhl" id="nav_right">
																													<!-- Cart Dropdown -->
								<nav class="right"><ul id="menu-primary" class="menu"><li  id="menu-item-20226" class="menu-item menu-item-type-post_type menu-item-object-page"><a  href="https://www.dataquest.io/directory/">Courses</a></li>
<li  id="menu-item-20223" class="menu-item menu-item-type-taxonomy menu-item-object-category"><a  href="https://www.dataquest.io/blog/topics/student-stories/">Student Stories</a></li>
<li  id="menu-item-20225" class="menu-item menu-item-type-post_type menu-item-object-page"><a  href="https://www.dataquest.io/were-hiring/">We&#8217;re Hiring</a></li>
<li  id="menu-item-20220" class="menu-item menu-item-type-post_type menu-item-object-page current_page_parent"><a  href="https://www.dataquest.io/blog/">Blog</a></li>
<li  id="menu-item-20221" class="menu-item menu-item-type-custom menu-item-object-custom"><a  href="http://app.dataquest.io/signup">Start Learning</a></li>
<li  id="menu-item-20222" class="menu-item menu-item-type-custom menu-item-object-custom"><a  href="http://app.dataquest.io">Log In</a></li>
</ul></nav>														<div class="clear"></div>
						</div>
												<div class="clear"></div>
														</div>
			</div>
		</header>
			</div>
	
			



			<div class="bspr"></div>
<div class="wrp cnt">
			<div class="bSeCont">
				<section class="bSe left">

																	
<article>
	<div class="awr">
					<h1 class="entry-title">Python List Tutorial: Lists, Loops, and More!</h1>
							<noscript><img src="https://www.dataquest.io/wp-content/uploads/2019/07/learn-python-tutorials-1040x520.jpg" alt="python tutorials for data science"
			     title="learn-python-tutorials"
			     class="fwI"/></noscript><img src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://www.dataquest.io/wp-content/uploads/2019/07/learn-python-tutorials-1040x520.jpg" alt="python tutorials for data science"
			     title="learn-python-tutorials"
			     class="lazyload fwI"/>
		
		<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>
        Lists are one of the most powerful data types in Python. In this Python List Tutorial, you&#8217;ll learn how to work with lists while analyzing data about mobile apps.
      </p>
<p>
        In this tutorial, we assume you know the very fundamentals of Python, including working with strings, integers, and floats. If you&#8217;re not familiar with these, you might like to try our <a href="https://www.dataquest.io/course/python-for-data-science-fundamentals/">free Python Fundamentals course</a>.
      </p>
<p>
        We&#8217;ll be working with this table of data, taken from <a href="https://www.kaggle.com/ramamet4/app-store-apple-data-set-10k-apps">Mobile App Store data set (Ramanathan Perumal)</a>:
      </p>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
              name
            </th>
<th>
              price
            </th>
<th>
              currency
            </th>
<th>
              rating_count
            </th>
<th>
              rating
            </th>
</tr>
</thead>
<tbody>
<tr>
<td>
              Facebook
            </td>
<td>
              0.0
            </td>
<td>
              USD
            </td>
<td>
              2974676
            </td>
<td>
              3.5
            </td>
</tr>
<tr>
<td>
              Instagram
            </td>
<td>
              0.0
            </td>
<td>
              USD
            </td>
<td>
              2161558
            </td>
<td>
              4.5
            </td>
</tr>
<tr>
<td>
              Clash of Clans
            </td>
<td>
              0.0
            </td>
<td>
              USD
            </td>
<td>
              2130805
            </td>
<td>
              4.5
            </td>
</tr>
<tr>
<td>
              Temple Run
            </td>
<td>
              0.0
            </td>
<td>
              USD
            </td>
<td>
              1724546
            </td>
<td>
              4.5
            </td>
</tr>
<tr>
<td>
              Pandora &#8211; Music &#038; Radio
            </td>
<td>
              0.0
            </td>
<td>
              USD
            </td>
<td>
              1126879
            </td>
<td>
              4.0
            </td>
</tr>
</tbody>
</table>
<p>
        Each value in the table is a <strong>data point</strong>. For instance, the first row (after the column titles) has five data points:
      </p>
<ul>
<li>
          <code>Facebook</code>
        </li>
<li>
          <code>0.0</code>
        </li>
<li>
          <code>USD</code>
        </li>
<li>
          <code>2974676</code>
        </li>
<li>
          <code>3.5</code>
        </li>
</ul>
<p>
        A collection of data points make up a <strong>dataset</strong>. We can understand our entire table above as a collection of data points, so we call the entire table a dataset. We can see that our data set has five rows and five columns.
      </p>
<p>
        Using our understanding of Python types, we might think we could store each data point in its own variable — for instance, this is how we might store the first row&#8217;s data points:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb1.svg" alt="data stored as individual variables" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb1.svg" alt="data stored as individual variables" /><br />
      </center></p>
<p>
        Above, we stored:
      </p>
<ul>
<li>
          The text &#8220;Facebook&#8221; as a string
        </li>
<li>
          The price 0.0 as a float
        </li>
<li>
          The text &#8220;USD&#8221; as a string
        </li>
<li>
          The rating count 2,974,676 as an integer
        </li>
<li>
          The user rating 3.5 as a float
        </li>
</ul>
<p>
        Creating a variable for each data point in our data set would be a cumbersome process. Fortunately, we can store data more efficiently using <strong>lists</strong>. This is how we can create a list of data points for the first row:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb2.svg" alt="a single rows data stored as a python list" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb2.svg" alt="a single rows data stored as a python list" /><br />
      </center></p>
<p>
        To create the list above, we:
      </p>
<ul>
<li>
          Typed out a sequence of data points and separated each with a comma: <code>'Facebook', 0.0, 'USD', 2974676, 3.5</code>
        </li>
<li>
          Surrounded the sequence with brackets: <code>['Facebook', 0.0, 'USD', 2974676, 3.5]</code>
        </li>
</ul>
<p>
        After we created the list, we stored it in the computer&#8217;s memory by assigning it to a variable named <code>row_1</code>.
      </p>
<p>
        To create a list of data points, we only need to:
      </p>
<ul>
<li>
          Separate the data points with a comma.
        </li>
<li>
          Surround the sequence of data points with brackets.
        </li>
</ul>
<p>
        Now let&#8217;s create five lists, one for each row in our dataset:
      </p>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<pre class='language-python'><code class='language-python'>row_1 = ['Facebook', 0.0, 'USD', 2974676, 3.5]
row_2 = ['Instagram', 0.0, 'USD', 2161558, 4.5]
row_3 = ['Clash of Clans', 0.0, 'USD', 2130805, 4.5]
row_4 = ['Temple Run', 0.0, 'USD', 1724546, 4.5]
row_5 = ['Pandora - Music & Radio', 0.0, 'USD', 1126879, 4.0]</code></pre>
</p></div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Indexing-Python-Lists">
        Indexing Python Lists<a class="anchor-link" href="#Indexing-Python-Lists"></a><br />
      </h2>
<p>
        A list can contain a variety of data types. A list like <code>[4, 5, 6]</code> has identical data types (only integers), while the list <code>['Facebook', 0.0, 'USD', 2974676, 3.5]</code> has mixed data types:
      </p>
<ul>
<li>
          Two strings (<code>'Facebook', 'USD'</code>)
        </li>
<li>
          Two floats (<code>0.0</code>, <code>3.5</code>)
        </li>
<li>
          One integer (<code>2974676</code>)
        </li>
</ul>
<p>
        The <code>['Facebook', 0.0, 'USD', 2974676, 3.5]</code> list has five data points. To find the length of a list, we can use the <code>len()</code> command:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb3.svg" alt="using len() to find the length of a list" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb3.svg" alt="using len() to find the length of a list" /><br />
      </center></p>
<p>
        For small lists, we can just count the data points on our screens to find the length, but the <code>len()</code> command will prove very useful whenever you work with lists containing many elements, or need to write code for data where you don&#8217;t know the length ahead of time.
      </p>
<p>
        Each element (data point) in a list has a specific number associated with it, called an <strong>index number</strong>. The indexing always starts at 0, so the first element will have the index number 0, the second element the index number 1, and so on.
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_positive_idx.svg" alt="indexing a python list, 1" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_positive_idx.svg" alt="indexing a python list, 1" /><br />
      </center></p>
<p>
        To quickly find the index of a list element, identify its position number in the list, and then subtract 1. For example, the string <code>'USD'</code> is the third element of the list (position number 3), so its index number must be 2 since 3 &#8211; 1 = 2.
      </p>
<p>
        The index numbers help us retrieve individual elements from a list. Looking back at the list <code>row_1</code> from the code example above, we can retrieve the first element (the string <code>'Facebook'</code>) with the index number 0 by running the code <code>row_1[0]</code>.
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb4.svg" alt="index a python list, 2" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb4.svg" alt="index a python list, 2" /><br />
      </center></p>
<p>
        The syntax for retrieving individual list elements follows the model <code>list_name[index_number]</code>. For instance, the name of our list above is <code>row_1</code> and the index number of the first element is <code>0</code> — following the <code>list_name[index_number]</code> model, we get <code>row_1[0]</code>, where the index number <code>0</code> is in square brackets after the variable name <code>row_1</code>.
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_pattern.svg" alt="syntax explanation for Python list indexing" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_pattern.svg" alt="syntax explanation for Python list indexing" /><br />
      </center></p>
<p>
        This is how we can retrieve each element in <code>row_1</code>:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb5.svg" alt="extracting each element from a list" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb5.svg" alt="extracting each element from a list" /><br />
      </center></p>
<p>
        Retrieving list elements makes it easier to perform operations. For instance, we can select the ratings for Facebook and Instagram, and find the average or the difference between the two:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb6.svg" alt="using list indexing to extract values and perform a calculation" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb6.svg" alt="using list indexing to extract values and perform a calculation" /><br />
      </center></p>
<p>
        Let&#8217;s use list indexing to extract the number of ratings from the first three rows and then average them:
      </p>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<pre class='language-python'><code class='language-python'>ratings_1 = row_1[3]
ratings_2 = row_2[3]
ratings_3 = row_3[3]

total = ratings_1 + ratings_2 + ratings_3
average = total / 3

print(average)</code></pre>
</p></div>
<div class="output_wrapper">
<div class="output">
<div class="output_area">
<div style="max-height:750px;max-width:1500px;overflow:auto;">
<pre class='language-'>2422346.3333333335
</pre>
</p></div>
</p></div>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Using-Negative-Indexing-with-Lists">
        Using Negative Indexing with Lists<a class="anchor-link" href="#Using-Negative-Indexing-with-Lists"></a><br />
      </h2>
<p>
        In Python, we have two indexing systems for lists:
      </p>
<ul>
<li>
          <strong>Positive indexing</strong>: the _first) element has the index number 0, the second element has the index number 1, and so on.
        </li>
<li>
          <strong>Negative indexing</strong>: the <em>last</em> element has the index number -1, the second to last element has the index number -2, and so on.
        </li>
</ul>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_positive_negative.svg" alt="positive vs negative indexing" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_positive_negative.svg" alt="positive vs negative indexing" /><br />
      </center></p>
<p>
        In practice, we almost always use positive indexing to retrieve list elements. Negative indexing is useful when we want to select the last element of a list — especially if the list is long, and we can&#8217;t tell the length by counting.
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb7.svg" alt="extracting the last element from a list" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb7.svg" alt="extracting the last element from a list" /><br />
      </center></p>
<p>
        Notice that if we use an index number that is outside the range of the two indexing systems, we&#8217;ll get an <code>IndexError</code>.
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb8.svg" alt="Python indexerror examples" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb8.svg" alt="Python indexerror examples" /><br />
      </center></p>
<p>
        Let&#8217;s use negative indexing to extract the user rating (the last value) from each of the first three rows and then average them.
      </p>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<pre class='language-python'><code class='language-python'>rating_1 = row_1[-1]
rating_2 = row_2[-1]
rating_3 = row_3[-1]

total_rating = rating_1 + rating_2 + rating_3
average_rating = total_rating / 3

print(average)</code></pre>
</p></div>
<div class="output_wrapper">
<div class="output">
<div class="output_area">
<div style="max-height:750px;max-width:1500px;overflow:auto;">
<pre class='language-'>2422346.3333333335
</pre>
</p></div>
</p></div>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Slicing-Python-Lists">
        Slicing Python Lists<a class="anchor-link" href="#Slicing-Python-Lists"></a><br />
      </h2>
<p>
        Instead of selecting list elements individually, we can use a syntax shortcut to select two or more consecutive elements:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb12.svg" alt="list slicing syntax shortcut" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb12.svg" alt="list slicing syntax shortcut" /><br />
      </center></p>
<p>
        When we select the first <code>n</code> elements (<code>n</code> stands for a number) from a list named <code>a_list</code>, we can use the syntax shortcut <code>a_list[0:n]</code>. In the example above, we needed to select the first three elements from the list <code>row_3</code>, so we used <code>row_3[0:3]</code>.
      </p>
<p>
        When we selected the first three elements, we <em>sliced</em> a part of the list. For this reason, the process of selecting a part of a list is called <strong>list slicing</strong>.
      </p>
<p>
        There are many ways that we might want to slice a list:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_slices.svg" alt="Python list slicing examples" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_slices.svg" alt="Python list slicing examples" /><br />
      </center></p>
<p>
        To retrieve any list slice we want:
      </p>
<ol>
<li>
          We first need to identify the first and the last element of the slice.
        </li>
<li>
          We then need to identify the index numbers of the first and the last element of the slice.
        </li>
<li>
          Finally we can retrieve the list slice we want by using the syntax <code>a_list[m:n]</code>, where:</p>
<ul>
<li>
              <code>m</code> represents the index number of the first element of the slice; and
            </li>
<li>
              <code>n</code> represents the index number of the last element of the slice <strong>plus one</strong> (if the last element has the index number 2, then we <code>n</code> will be 3, if the last element has the index number 4, then <code>n</code> will be 5, and so on).
            </li>
</ul>
</li>
</ol>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_any_slice.svg" alt="Python list slicing syntax explanation" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_any_slice.svg" alt="Python list slicing syntax explanation" /><br />
      </center></p>
<p>
        When we need to select the first or last <code>x</code> elements (<code>x</code> stands for a number), we can use even simpler syntax shortcuts:
      </p>
<ul>
<li>
          <code>a_list[:x]</code> when we want to select the first <code>x</code> elements.
        </li>
<li>
          <code>a_list[-x:]</code> when we want to select the last <code>x</code> elements.
        </li>
</ul>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb13.svg" alt="list slicing wildcard syntax example" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb13.svg" alt="list slicing wildcard syntax example" /><br />
      </center></p>
<p>
        Let&#8217;s look at how we extract the first four elements from the first row (with data about Facebook):
      </p>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<pre class='language-python'><code class='language-python'>first_4_fb = row_1[:4]
print(first_4_fb)</code></pre>
</p></div>
<div class="output_wrapper">
<div class="output">
<div class="output_area">
<div style="max-height:750px;max-width:1500px;overflow:auto;">
<pre class='language-'>['Facebook', 0.0, 'USD', 2974676]
</pre>
</p></div>
</p></div>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>
        The last three elements from that same row:
      </p>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<pre class='language-python'><code class='language-python'>last_3_fb = row_1[-3:]
print(last_3_fb)</code></pre>
</p></div>
<div class="output_wrapper">
<div class="output">
<div class="output_area">
<div style="max-height:750px;max-width:1500px;overflow:auto;">
<pre class='language-'>['USD', 2974676, 3.5]
</pre>
</p></div>
</p></div>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>
        And elements three and four from the fifth row (with data about Pandora):
      </p>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<pre class='language-python'><code class='language-python'>pandora_3_4 = row_5[2:4]
print(pandora_3_4)</code></pre>
</p></div>
<div class="output_wrapper">
<div class="output">
<div class="output_area">
<div style="max-height:750px;max-width:1500px;overflow:auto;">
<pre class='language-'>['USD', 1126879]
</pre>
</p></div>
</p></div>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Python-List-of-Lists">
        Python List of Lists<a class="anchor-link" href="#Python-List-of-Lists"></a><br />
      </h2>
<p>
        Previously, we introduced lists as a better alternative to using one variable per data point. Instead of having a separate variable for each of the five data points <code>'Facebook', 0.0, 'USD', 2974676, 3.5</code>, we can bundle the data points together into a list, and then store the list in a single variable.
      </p>
<p>
        So far, we&#8217;ve been working with a data set having five rows, and we&#8217;ve been storing each row as a list in a separate variable (the variables <code>row_1</code>, <code>row_2</code>, <code>row_3</code>, <code>row_4</code>, and <code>row_5</code>). If we had a data set with 5,000 rows, however, we&#8217;d end up with 5,000 variables, which will make our code messy and almost impossible to work with.
      </p>
<p>
        To solve this problem, we can store our five variables in a single list:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb14.svg" alt="creating a list of lists from individual lists" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb14.svg" alt="creating a list of lists from individual lists" /><br />
      </center></p>
<p>
        As we can see, <code>data_set</code> is a list that stores five other lists (<code>row_1</code>, <code>row_2</code>, <code>row_3</code>, <code>row_4</code>, and <code>row_5</code>). A list that contains other lists is called a <strong>list of lists</strong>.
      </p>
<p>
        The <code>data_set</code> variable is still a list, which means we can retrieve individual list elements and perform list slicing using the syntax we learned. Below, we:
      </p>
<ul>
<li>
          Retrieve the first list element (<code>row_1</code>) using <code>data_set[0]</code>.
        </li>
<li>
          Retrieve the last list element (<code>row_5</code>) using <code>data_set[-1]</code>.
        </li>
<li>
          Retrieve the first two list elements (<code>row_1</code> and <code>row_2</code>) by performing list slicing using <code>data_set[:2]</code>.
        </li>
</ul>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb15.svg" alt="selecting "rows" from from a list of lists"/></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb15.svg" alt="selecting "rows" from from a list of lists"/><br />
      </center></p>
<p>
        We&#8217;ll often need to retrieve individual elements from a list that&#8217;s part of a list of lists — for instance, we may want to retrieve the value <code>3.5</code> from <code>['Facebook', 0.0, 'USD', 2974676, 3.5]</code>, which is part of the <code>data_set</code> list of lists. Below, we extract <code>3.5</code> from <code>data_set</code> using what we&#8217;ve learned:
      </p>
<ul>
<li>
          We retrieve <code>row_1</code> using <code>data_set[0]</code>, and assign the result to a variable named <code>fb_row</code>.
        </li>
<li>
          We print <code>fb_row</code>, which outputs <code>['Facebook', 0.0, 'USD', 2974676, 3.5]</code>.
        </li>
<li>
          We retrieve the last element from <code>fb_row</code> using <code>fb_row[-1]</code> (since <code>fb_row</code> is a list), and assign the result to a variable named <code>fb_rating</code>.
        </li>
<li>
          Print <code>fb_rating</code>, which outputs <code>3.5</code>
        </li>
</ul>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb16_new1.svg" alt="selecting individual elements from a list of lists in two steps" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb16_new1.svg" alt="selecting individual elements from a list of lists in two steps" /><br />
      </center></p>
<p>
        Above, we retrieved <code>3.5</code> in two steps: we first retrieved <code>data_set[0]</code>, and then we retrieved <code>fb_row[-1]</code>. However, there&#8217;s an easier way to retrieve the same value of <code>3.5</code> by chaining the two indices (<code>[0]</code> and <code>[-1]</code>) — the code <code>data_set[0][-1]</code> retrieves <code>3.5</code>:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb16_new2.svg" alt="selecting individual elements from a list of lists in one step" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb16_new2.svg" alt="selecting individual elements from a list of lists in one step" /><br />
      </center></p>
<p>
        Above, we&#8217;ve seen two ways of retrieving the value <code>3.5</code>. Both ways lead to the same output (<code>3.5</code>), but the second way involves less typing because it elegantly combines the steps we see in the first case. While you can choose either option, people generally choose the second one.
      </p>
<p>
        Let&#8217;s transform our five individual lists into a list of lists:
      </p>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<pre class='language-python'><code class='language-python'>app_data_set = [row_1, row_2, row_3, row_4, row_5]
print(app_data_set)</code></pre>
</p></div>
<div class="output_wrapper">
<div class="output">
<div class="output_area">
<div class="output_text output_subarea output_execute_result" style="max-height:500px;max-width:1500px;overflow:auto;">
<pre class='language-'>[['Facebook', 0.0, 'USD', 2974676, 3.5],
 ['Instagram', 0.0, 'USD', 2161558, 4.5],
 ['Clash of Clans', 0.0, 'USD', 2130805, 4.5],
 ['Temple Run', 0.0, 'USD', 1724546, 4.5],
 ['Pandora - Music & Radio', 0.0, 'USD', 1126879, 4.0]]</pre>
</p></div>
</p></div>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Repetitive-List-Processes">
        Repetitive List Processes<a class="anchor-link" href="#Repetitive-List-Processes"></a><br />
      </h2>
<p>
        Previously in this mission, we were interested in computing the average rating of an app. This was a doable task when we were working with only three rows, but the more rows we add the harder it becomes. Using our strategy from earlier, we&#8217;ll:
      </p>
<ol>
<li>
          Retrieve each individual rating.
        </li>
<li>
          Sum up the ratings.
        </li>
<li>
          Divide by the number of ratings.
        </li>
</ol>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb20.svg" alt="Manually calculating app average" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb20.svg" alt="Manually calculating app average" /><br />
      </center></p>
<p>
        As you can see, with five ratings this becomes complex. If we were working with data containing 1,000s of rows, it would require an impractical amount of code! We need to find a simple way to retrieve many ratings.
      </p>
<p>
        Looking at the code example above, we see that a process keeps repeating: we select the last list element for <em>each</em> list within <code>app_data_set</code>. The <code>app_data_set</code> stores five lists, so we repeat the same process five times. What if we could tell Python directly that we want to repeat this process for each list in <code>app_data_set</code>?
      </p>
<p>
        Fortunately, we can do that — Python offers us an easy way to repeat a process, which helps us enormously when we need to repeat a process hundreds, thousands, or even millions of times.
      </p>
<p>
        Let&#8217;s say we have a list <code>[3, 5, 1, 2]</code> assigned to a variable <code>ratings</code>, and we want to repeat the following process: <strong>for</strong> each element <strong>in</strong> <code>ratings</code>, print that element. This is how we could translate that into Python syntax:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_loop_new1.svg" alt="first for loop example" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_loop_new1.svg" alt="first for loop example" /><br />
      </center></p>
<p>
        In our first example above, the process we wanted to repeat was _&#8221;extract the last element <strong>for</strong> each list <strong>in</strong> <code>app_data_set</code>&#8220;_. This is how we can translate that process into Python syntax:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb21.svg" alt="second for loop example" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb21.svg" alt="second for loop example" /><br />
      </center></p>
<p>
        Let&#8217;s try to get a better understanding of what happens above. Python isolates, one at a time, each list element from <code>app_data_set</code>, and assigns it to <code>each_list</code> (which basically becomes a variable that stores a list — we&#8217;ll discuss this more on the next screen):
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb22.svg" alt="printing each item in a list using a loop" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb22.svg" alt="printing each item in a list using a loop" /><br />
      </center></p>
<p>
        The code in the last diagram above is a much more simplified and abstracted version of the code below:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb23.svg" alt="manual version of printing each item in a list" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb23.svg" alt="manual version of printing each item in a list" /><br />
      </center></p>
<p>
        Using the technique above requires us to write a line of code for every row in the data set. But using the <code>for each_list in app_data_set</code> technique requires us to write only two lines of code regardless of the number of rows in the data set — the data set can have five rows or one million.
      </p>
<p>
        Our intermediate goal is to use this new technique to compute the average rating for our five rows above, and our final goal is to compute the average rating for our data set with 7,197 rows. We&#8217;ll do exactly that over the next few screens of this mission, but for now, we&#8217;ll focus on practicing this technique to get a good grasp of it.
      </p>
<p>
        Before writing any code, we need to indent the code we want repeated four space characters to the right:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb24.svg" alt="example showing loop block indentation" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb24.svg" alt="example showing loop block indentation" /><br />
      </center></p>
<p>
        Technically, we only need to indent the code at least one space character to the right, but the convention in the Python community is to use four space characters. This helps with readability — it will be easier for other people who follow this convention to read your code, and it will be easier for you to read theirs.
      </p>
<p>
        Let&#8217;s use this technique to print the name and rating of each app:
      </p>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<pre class='language-python'><code class='language-python'>for each_list in app_data_set:
    name = each_list[0]
    rating = each_list[-1]
    print(name, rating)</code></pre>
</p></div>
<div class="output_wrapper">
<div class="output">
<div class="output_area">
<div style="max-height:750px;max-width:1500px;overflow:auto;">
<pre class='language-'>Facebook 3.5
Instagram 4.5
Clash of Clans 4.5
Temple Run 4.5
Pandora - Music & Radio 4.0
</pre>
</p></div>
</p></div>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Lists-and-For-Loops-in-Python">
        Lists and For Loops in Python<a class="anchor-link" href="#Lists-and-For-Loops-in-Python"></a><br />
      </h2>
<p>
        The technique we&#8217;ve just learned is called a <strong>loop</strong>. Loops are an incredibly useful tool that are used to perform repetitive processes with Python lists. Because we always start with <code>for</code> (like in <code>for some_variable in some_list:</code>), this technique is known as a <strong>for loop</strong>.
      </p>
<p>
        These are the structural parts of a <strong>for loop</strong>:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb25.svg" alt="Parts of a loop" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb25.svg" alt="Parts of a loop" /><br />
      </center></p>
<p>
        The indented code in the <strong>body</strong> gets executed the same number of times as elements in the <strong>iterable variable</strong>. If the iterable variable is a list that has three elements, the indented code in the body gets executed three times. We call each code execution an <strong>iteration</strong>, so there&#8217;ll be three iterations for a list that has three elements. For each iteration, the <strong>iteration variable</strong> will take a different value, following this pattern:
      </p>
<ul>
<li>
          For the first iteration, the value is the first element of the iterable (from the example above, <code>1</code>).
        </li>
<li>
          For the second iteration, the value is the second element of the iterable (from the example above, <code>3</code>).
        </li>
<li>
          For the third iteration, the value is the third element of the iterable (from the example above, <code>5</code>).
        </li>
</ul>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_loops.gif" alt="step-by-step iteration of a loop" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_loops.gif" alt="step-by-step iteration of a loop" /><br />
      </center></p>
<p>
        The name of the interation variable can be whatever you like &#8211; if you replaced <code>value</code> in the code above with <code>dog</code>, the code will work exactly the same way. That said, it&#8217;s convention to use something that helps communicate what the data is.
      </p>
<p>
        The code <em>outside</em> the loop body can interact with the code <em>inside</em> the loop body. For instance, in the code below we:
      </p>
<ul>
<li>
          Initialize a variable <code>a_sum</code> with a value of zero <em>outside</em> the loop body.
        </li>
<li>
          We <strong>loop</strong> (or <strong>iterate</strong>) over <code>a_list</code>. For every iteration of the loop, we:</p>
<ul>
<li>
              Perform an addition (<em>inside</em> the loop body) between the current value of the iteration variable <code>value</code> and the current value stored in <code>a_sum</code> (<code>a_sum</code> was defined outside the loop body).
            </li>
<li>
              Assign the result of the addition back to <code>a_sum</code> (inside the loop body).
            </li>
<li>
              Print the value of the <code>a_sum</code> variable (inside the loop body). Notice that the value of <code>a_sum</code> changes after each addition. At the end of the loop, <code>a_sum</code> has the value <code>9</code>, which is equivalent to the sum of the numbers in <code>a_list</code> (<code>1 + 3 + 5</code>).
            </li>
</ul>
</li>
</ul>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb26.svg" alt="summing with a loop" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb26.svg" alt="summing with a loop" /><br />
      </center></p>
<p>
        Above, we created a way to sum up the numbers in a list. We can use this technique to sum up the ratings in our dataset. Once we have the sum, we only need to divide by the number of ratings to get the average value.
      </p>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<pre class='language-python'><code class='language-python'>rating_sum = 0
for row in app_data_set:
    rating = row[-1]
    rating_sum = rating_sum + rating
    
avg_rating = rating_sum / len(app_data_set)
print(avg_rating)</code></pre>
</p></div>
<div class="output_wrapper">
<div class="output">
<div class="output_area">
<div style="max-height:750px;max-width:1500px;overflow:auto;">
<pre class='language-'>4.2
</pre>
</p></div>
</p></div>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>
        We&#8217;ve covered the fundamentals of for loops here, but if you&#8217;d like some more practice, we also have tutorials on <a href="https://www.dataquest.io/blog/python-for-loop-tutorial/">for loop basics</a> and <a href="https://www.dataquest.io/blog/tutorial-advanced-for-loops-python-pandas/">advanced for loops</a> that you can check out.
      </p>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Alternative-Way-to-Compute-a-List-Average">
        Alternative Way to Compute a List Average<a class="anchor-link" href="#Alternative-Way-to-Compute-a-List-Average"></a><br />
      </h2>
<p>
        Now we&#8217;ll learn an alternative way to compute the average rating value. Once we create a list, we can add (or <strong>append</strong>) values to it using the <code>append()</code> command.
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb31.svg" alt="Using append to add values to a list" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb31.svg" alt="Using append to add values to a list" /><br />
      </center></p>
<p>
        Unlike other commands we&#8217;ve learned, notice that <code>append()</code> has a special syntactical usage, following the pattern <code>list_name.append()</code> rather than being simply used as <code>append()</code>.
      </p>
<p>
        Now that we know how to append values to a list, we can take the steps below to compute the average app rating:
      </p>
<ol>
<li>
          We initialize an empty list.
        </li>
<li>
          We start looping over our data set and <em>extract</em> the ratings.
        </li>
<li>
          We <em>append</em> the ratings to the empty list we created at step one.
        </li>
<li>
          Once we have all the ratings, we:</p>
<ul>
<li>
              use the <code>sum()</code> command to sum up all the ratings (to be able to use <code>sum()</code>, we&#8217;ll need to store the ratings as floats or integers); and then
            </li>
<li>
              we divide the sum by the number of ratings (which we can get using the <code>len()</code> command).
            </li>
</ul>
</li>
</ol>
<p>
        Below, we can see the steps above implemented for our data set with five rows:
      </p>
<p>      <center><br />
        <noscript><img src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb32.svg" alt="Using append to extract values and calculate an average" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20%20%22%3E%3C/svg%3E' data-src="https://dq-blog-files.s3.amazonaws.com/list-tutorial/py1m2_cb32.svg" alt="Using append to extract values and calculate an average" /><br />
      </center></p>
<p>
        We can also use <code>append()</code> to add another row to our list of lists by appending the data as a list. Let&#8217;s look at how that works:
      </p>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<pre class='language-python'><code class='language-python'>row_6 = ['Pinterest', 0.0, 'USD', 1061624, 4]
app_data_set.append(row_6)

print(app_data_set)</code></pre>
</p></div>
<div class="output_wrapper">
<div class="output">
<div class="output_area">
<div class="output_text output_subarea output_execute_result" style="max-height:500px;max-width:1500px;overflow:auto;">
<pre class='language-'>[['Facebook', 0.0, 'USD', 2974676, 3.5],
 ['Instagram', 0.0, 'USD', 2161558, 4.5],
 ['Clash of Clans', 0.0, 'USD', 2130805, 4.5],
 ['Temple Run', 0.0, 'USD', 1724546, 4.5],
 ['Pandora - Music & Radio', 0.0, 'USD', 1126879, 4.0],
 ['Pinterest', 0.0, 'USD', 1061624, 4],
 ['Pinterest', 0.0, 'USD', 1061624, 4]]</pre>
</p></div>
</p></div>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>
        Now, let&#8217;s use the technique we learned above to calculate the average rating of all six apps:
      </p>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<pre class='language-python'><code class='language-python'>all_ratings = []

for row in app_data_set:
    rating = float(row[-1])
    all_ratings.append(rating)
    
avg_rating = sum(all_ratings) / len(all_ratings)
print(avg_rating)</code></pre>
</p></div>
<div class="output_wrapper">
<div class="output">
<div class="output_area">
<div style="max-height:750px;max-width:1500px;overflow:auto;">
<pre class='language-'>4.166666666666667
</pre>
</p></div>
</p></div>
</p></div>
</p></div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Next-Steps">
        Next Steps<a class="anchor-link" href="#Next-Steps"></a><br />
      </h2>
<p>
        In this tutorial we learned how to:
      </p>
<ul>
<li>
          use Python lists to store and work with data
        </li>
<li>
          access values stored in lists using positive and negative indexing
        </li>
<li>
          use lists of lists to work with tabular data
        </li>
<li>
          use for loops to automate repetitive tasks
        </li>
<li>
          append values to lists
        </li>
</ul>
<p>
        If you&#8217;d like to practice working with Python lists, this tutorial is based on part of our <a href="https://www.dataquest.io/course/python-for-data-science-fundamentals/">free Python Fundamentals course</a>. The course can be taken from your web browser, and you&#8217;ll write code to analyze the full dataset of over 7,000 mobile apps!
      </p>
</p></div>
</p></div>
</div>
<span style="display:none" class="tl-placeholder-f-type-shortcode_19063"></span>
<span id="tho-end-content" style="display: block; visibility: hidden;"></span><span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;"></span><div class="saboxplugin-wrap" itemtype="http://schema.org/Person" itemscope itemprop="author"><div class="saboxplugin-gravatar"><noscript><img src="https://secure.gravatar.com/avatar/488062fe3e2d6bbf1da752fa6d89c37f?s=100&#038;d=identicon&#038;r=g" width="100" height="100" alt="Avatar" class="avatar avatar-100 wp-user-avatar wp-user-avatar-100 photo avatar-default" /></noscript><img src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20100%20100%22%3E%3C/svg%3E' data-src="https://secure.gravatar.com/avatar/488062fe3e2d6bbf1da752fa6d89c37f?s=100&#038;d=identicon&#038;r=g" width="100" height="100" alt="Avatar" class="lazyload avatar avatar-100 wp-user-avatar wp-user-avatar-100 photo avatar-default" /></div><div class="saboxplugin-authorname"><a href="https://www.dataquest.io/blog/author/josh-devlin/" class="vcard author" rel="author" itemprop="url"><span class="fn" itemprop="name">Josh Devlin</span></a></div><div class="saboxplugin-desc"><div itemprop="description"><p>Data Scientist at Dataquest.io. Loves Data and Aussie Rules Football. Australian living in Texas.</p>
</div></div><div class="clearfix"></div></div>
		<div class="clear"></div>
				<div class="clear"></div>
							<footer>
				<ul class="meta left">
					<li>
																											in																<span>
                                        <a href="https://www.dataquest.io/blog/topics/data-science-tutorials/">
	                                        Data Science Tutorials                                        </a>
									                                    </span>
																				
																				by <a
								href="https://www.dataquest.io/blog/author/josh-devlin/">Josh Devlin</a>
											</li>
																		<li class="sep">|</li>
												<li>
															November 15, 2019													</li>
														</ul>
								<div class="clear"></div>
			</footer>
					</div>

</article>
<div class="rltpi clearfix">
	<div class="awr">
		<h5>Related Posts</h5>
					<a href="https://www.dataquest.io/blog/excel-vs-python/" class="rlt left">
				<div class="rlti"  style="background-image: url('https://www.dataquest.io/wp-content/uploads/2019/02/xlwings-tutorial-python-excel-510x162.jpg')"></div>
				<p>Excel vs Python: How to Do Common Data Analysis Tasks</p>
			</a>
					<a href="https://www.dataquest.io/blog/sql-joins-tutorial/" class="rlt left">
				<div class="rlti"  style="background-image: url('https://www.dataquest.io/wp-content/uploads/2019/10/sql-database-schema-1895779_1280-510x162.png')"></div>
				<p>SQL Joins Tutorial: Working with Databases</p>
			</a>
					<a href="https://www.dataquest.io/blog/data-pipelines-tutorial/" class="rlt left">
				<div class="rlti"  style="background-image: url('https://www.dataquest.io/wp-content/uploads/data-pipeline.png')"></div>
				<p>Tutorial: Building An Analytics Data Pipeline In Python</p>
			</a>
					<a href="https://www.dataquest.io/blog/python-datetime-tutorial/" class="rlt left">
				<div class="rlti"  style="background-image: url('https://www.dataquest.io/wp-content/uploads/2019/10/python-datetime-tutorial-510x162.jpg')"></div>
				<p>Python Datetime Tutorial: Manipulate Times, Dates, and Time Spans</p>
			</a>
					</div>
</div><div class="spr"></div>																					
	<script type="text/javascript">
		_thriveCurrentPost = 21420;
	</script>
	<article id="comments">
		<div class="awr">
			
			
			<div id="thrive_container_list_comments">
							</div>

			
					</div>
	</article>
	<div id="comment-bottom"></div>

																			</section>
			</div>
			
	<div class="sAsCont">
		<aside class="sAs right">
							<section id="custom_html-2"><div class="widget_text scn"><div class="textwidget custom-html-widget"><span style="display:none" class="tl-placeholder-f-type-shortcode_11317"></span></div></div></section><section id="search-3"><div class="scn"><form action="https://www.dataquest.io/" method="get" class="srh">
	<div>
		<input type="text" placeholder="Search" class="search-field" name="s"/>
		<button type="submit" class="search-button sBn"></button>
		<div class="clear"></div>
	</div>
</form>
</div></section><section id="nav_menu-3"><div class="scn"><p class="ttl">Browse the blog:</p><div class="menu-left-container"><ul id="menu-left" class="menu"><li id="menu-item-14042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-14042"><a href="https://www.dataquest.io/blog/data-science-career-guide/">Job Application Guide</a></li>
<li id="menu-item-5973" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-5973"><a href="https://www.dataquest.io/blog/topics/data-science-tutorials/">Tutorials</a></li>
<li id="menu-item-5978" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-5978"><a href="https://www.dataquest.io/blog/topics/student-stories/">Student Stories</a></li>
<li id="menu-item-5974" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-5974"><a href="https://www.dataquest.io/blog/topics/learning-and-motivation/">Learning and Motivation</a></li>
<li id="menu-item-5979" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-5979"><a href="https://www.dataquest.io/blog/topics/building-a-data-science-portfolio/">How to Build a Portfolio</a></li>
<li id="menu-item-5977" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-5977"><a href="https://www.dataquest.io/blog/topics/data-science-projects/">Data Science Projects</a></li>
</ul></div></div></section><section id="nav_menu-10"><div class="scn"><p class="ttl">More resources:</p><div class="menu-more-resources-container"><ul id="menu-more-resources" class="menu"><li id="menu-item-19385" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-19385"><a href="https://www.dataquest.io/data-science-courses/">Data Science Courses</a></li>
<li id="menu-item-19386" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-19386"><a href="https://www.dataquest.io/python-tutorials-for-data-science/">Python Tutorials</a></li>
<li id="menu-item-19388" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-19388"><a href="https://www.dataquest.io/blog/data-analyst-data-scientist-data-engineer/">Data Analyst vs. Scientist vs. Engineer</a></li>
</ul></div></div></section>			
		</aside>
	</div>

		<div class="clear"></div>
</div>
<div class="clear"></div>
</div>



<footer>
			<div class="ftw" id="dq_footer">
			<div class="wrp cnt">
									<div class="colm twc ">
						<section id="text-5">			<div class="textwidget"><div style="margin: 20px 0px 20px 0px;">
<p><a href="/"><noscript><img src="https://www.dataquest.io/wp-content/uploads/2019/01/dq-1.png" width="170px" height="28px" /></noscript><img class="lazyload" src='data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20170%2028%22%3E%3C/svg%3E' data-src="https://www.dataquest.io/wp-content/uploads/2019/01/dq-1.png" width="170px" height="28px" /></a></p>
</div>
<div style="margin: 20px 0px 20px 0px;">All rights reserved © 2019 – Dataquest Labs, Inc.</div>
<div style="margin: 20px 50px 20px 0px;">We are committed to protecting your personal information and your right to privacy. Privacy Policy last updated June 13th, 2019 &#8211; <a style="color: #ffffff; font-size: 12px;" href="/privacy">review here</a>.</div>
</div>
		</section>					</div>
									<div class="colm twc lst">
						<section id="text-9">			<div class="textwidget"><div class="footer-links" style="font-size: 12px; margin: 20px 0px 0px 0px;">
<div style="float: left; margin-right: 50px;"><a href="https://www.dataquest.io/help" target="_blank" rel="noopener noreferrer">Help</a><br />
<a href="https://www.dataquest.io/blog" target="_blank" rel="noopener noreferrer">Blog</a><br />
<a href="https://www.dataquest.io/directory">Directory</a><br />
<a href="https://community.dataquest.io" target="_blank" rel="noopener noreferrer">Community</a></div>
<div style="float: left; margin-right: 50px;"><a href="https://www.dataquest.io/subscribe">Pricing</a><br />
<a href="https://www.dataquest.io/were-hiring">We&#8217;re Hiring</a><br />
<a href="https://www.dataquest.io/terms">Legals</a><br />
<a href="https://www.dataquest.io/privacy">Privacy</a></div>
<div style="float: left; margin-bottom: 100px;"><a href="https://www.facebook.com/dataquestio" target="_blank" rel="noopener noreferrer">Facebook</a><br />
<a href="https://twitter.com/dataquestio" target="_blank" rel="noopener noreferrer">Twitter</a><br />
<a href="https://www.linkedin.com/company/dataquest-io" target="_blank" rel="noopener noreferrer">LinkedIn</a></div>
</div>
</div>
		</section>					</div>
								<div class="clear"></div>
			</div>
		</div>
			<div class="copy">
		<div class="wrp cnt">
			<p>
											</p>
					</div>
	</div>
	</footer>


	<script>
  !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","debug","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t,e){var n=document.createElement("script");n.type="text/javascript";n.async=!0;n.src="https://cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(n,a);analytics._loadOptions=e};analytics.SNIPPET_VERSION="4.1.0";
  analytics.load("BJhKYEXejzjqXq7xQDFI6N0M5W7HBAH5");
  analytics.page();
  }}();
</script><script type='text/javascript'>
/* <![CDATA[ */
var TVE_Ult_Data = {"ajaxurl":"https:\/\/www.dataquest.io\/wp-admin\/admin-ajax.php","ajax_load_action":"tve_ult_ajax_load","conversion_events_action":"tve_ult_conversion_event","shortcode_campaign_ids":[],"matched_display_settings":[],"campaign_ids":[],"post_id":21420,"is_singular":true,"tu_em":""};
/* ]]> */
</script>
		<script type="text/javascript" src="https://www.dataquest.io/wp-content/plugins/thrive-ultimatum/js/dist/no-campaign.min.js?v=2.2.5.1"></script><style>.lazyload,.lazyloading{opacity:0;}.lazyloaded{opacity:1;transition:opacity 300ms;}</style><noscript><style>.lazyload{display:none;}</style></noscript><script data-noptimize="1">window.lazySizesConfig=window.lazySizesConfig||{};window.lazySizesConfig.loadMode=1;</script><script async data-noptimize="1" src='https://www.dataquest.io/wp-content/plugins/autoptimize/classes/external/js/lazysizes.min.js'></script><span style="display:none" class="tl-placeholder-f-type-ribbon"></span><style type="text/css">.saboxplugin-wrap{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;box-sizing:border-box;border:1px solid #eee;width:100%;clear:both;display:block;overflow:hidden;word-wrap:break-word;position:relative}.saboxplugin-wrap .saboxplugin-gravatar{float:left;padding:20px}.saboxplugin-wrap .saboxplugin-gravatar img{max-width:100px;height:auto;border-radius:0;}.saboxplugin-wrap .saboxplugin-authorname{font-size:18px;line-height:1;margin:20px 0 0 20px;display:block}.saboxplugin-wrap .saboxplugin-authorname a{text-decoration:none}.saboxplugin-wrap .saboxplugin-authorname a:focus{outline:0}.saboxplugin-wrap .saboxplugin-desc{display:block;margin:5px 20px}.saboxplugin-wrap .saboxplugin-desc a{text-decoration:underline}.saboxplugin-wrap .saboxplugin-desc p{margin:5px 0 12px}.saboxplugin-wrap .saboxplugin-web{margin:0 20px 15px;text-align:left}.saboxplugin-wrap .sab-web-position{text-align:right}.saboxplugin-wrap .saboxplugin-web a{color:#ccc;text-decoration:none}.saboxplugin-wrap .saboxplugin-socials{position:relative;display:block;background:#fcfcfc;padding:5px;border-top:1px solid #eee}.saboxplugin-wrap .saboxplugin-socials a svg{width:20px;height:20px}.saboxplugin-wrap .saboxplugin-socials a svg .st2{fill:#fff; transform-origin:center center;}.saboxplugin-wrap .saboxplugin-socials a svg .st1{fill:rgba(0,0,0,.3)}.saboxplugin-wrap .saboxplugin-socials a:hover{opacity:.8;-webkit-transition:opacity .4s;-moz-transition:opacity .4s;-o-transition:opacity .4s;transition:opacity .4s;box-shadow:none!important;-webkit-box-shadow:none!important}.saboxplugin-wrap .saboxplugin-socials .saboxplugin-icon-color{box-shadow:none;padding:0;border:0;-webkit-transition:opacity .4s;-moz-transition:opacity .4s;-o-transition:opacity .4s;transition:opacity .4s;display:inline-block;color:#fff;font-size:0;text-decoration:inherit;margin:5px;-webkit-border-radius:0;-moz-border-radius:0;-ms-border-radius:0;-o-border-radius:0;border-radius:0;overflow:hidden}.saboxplugin-wrap .saboxplugin-socials .saboxplugin-icon-grey{text-decoration:inherit;box-shadow:none;position:relative;display:-moz-inline-stack;display:inline-block;vertical-align:middle;zoom:1;margin:10px 5px;color:#444}.clearfix:after,.clearfix:before{content:' ';display:table;line-height:0;clear:both}.ie7 .clearfix{zoom:1}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-twitch{border-color:#38245c}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-addthis{border-color:#e91c00}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-behance{border-color:#003eb0}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-delicious{border-color:#06c}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-deviantart{border-color:#036824}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-digg{border-color:#00327c}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-dribbble{border-color:#ba1655}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-facebook{border-color:#1e2e4f}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-flickr{border-color:#003576}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-github{border-color:#264874}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-google{border-color:#0b51c5}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-googleplus{border-color:#96271a}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-html5{border-color:#902e13}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-instagram{border-color:#1630aa}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-linkedin{border-color:#00344f}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-pinterest{border-color:#5b040e}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-reddit{border-color:#992900}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-rss{border-color:#a43b0a}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-sharethis{border-color:#5d8420}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-skype{border-color:#00658a}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-soundcloud{border-color:#995200}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-spotify{border-color:#0f612c}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-stackoverflow{border-color:#a95009}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-steam{border-color:#006388}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-user_email{border-color:#b84e05}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-stumbleUpon{border-color:#9b280e}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-tumblr{border-color:#10151b}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-twitter{border-color:#0967a0}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-vimeo{border-color:#0d7091}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-windows{border-color:#003f71}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-whatsapp{border-color:#003f71}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-wordpress{border-color:#0f3647}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-yahoo{border-color:#14002d}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-youtube{border-color:#900}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-xing{border-color:#000202}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-mixcloud{border-color:#2475a0}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-vk{border-color:#243549}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-medium{border-color:#00452c}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-quora{border-color:#420e00}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-meetup{border-color:#9b181c}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-goodreads{border-color:#000}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-snapchat{border-color:#999700}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-500px{border-color:#00557f}.saboxplugin-socials.sabox-colored .saboxplugin-icon-color .sab-mastodont{border-color:#185886}.sabox-plus-item{margin-bottom:20px}@media screen and (max-width:480px){.saboxplugin-wrap{text-align:center}.saboxplugin-wrap .saboxplugin-gravatar{float:none;padding:20px 0;text-align:center;margin:0 auto;display:block}.saboxplugin-wrap .saboxplugin-gravatar img{float:none;display:inline-block;display:-moz-inline-stack;vertical-align:middle;zoom:1}.saboxplugin-wrap .saboxplugin-desc{margin:0 10px 20px;text-align:center}.saboxplugin-wrap .saboxplugin-authorname{text-align:center;margin:10px 0 20px}}body .saboxplugin-authorname a,body .saboxplugin-authorname a:hover{box-shadow:none;-webkit-box-shadow:none}a.sab-profile-edit{font-size:16px!important;line-height:1!important}.sab-edit-settings a,a.sab-profile-edit{color:#0073aa!important;box-shadow:none!important;-webkit-box-shadow:none!important}.sab-edit-settings{margin-right:15px;position:absolute;right:0;z-index:2;bottom:10px;line-height:20px}.sab-edit-settings i{margin-left:5px}.saboxplugin-socials{line-height:1!important}.rtl .saboxplugin-wrap .saboxplugin-gravatar{float:right}.rtl .saboxplugin-wrap .saboxplugin-authorname{display:flex;align-items:center}.rtl .saboxplugin-wrap .saboxplugin-authorname .sab-profile-edit{margin-right:10px}.rtl .sab-edit-settings{right:auto;left:0}img.sab-custom-avatar{max-width:75px;}.saboxplugin-wrap .saboxplugin-gravatar img {-webkit-border-radius:50%;-moz-border-radius:50%;-ms-border-radius:50%;-o-border-radius:50%;border-radius:50%;}.saboxplugin-wrap {margin-top:20px; margin-bottom:0px; padding: 0px 0px }.saboxplugin-wrap .saboxplugin-authorname {font-size:16px; line-height:23px;}.saboxplugin-wrap .saboxplugin-desc p, .saboxplugin-wrap .saboxplugin-desc {font-size:13px !important; line-height:20px !important;}.saboxplugin-wrap .saboxplugin-web {font-size:14px;}.saboxplugin-wrap .saboxplugin-socials a svg {width:18px;height:18px;}</style><script type='text/javascript' src='https://www.dataquest.io/wp-content/plugins/thrive-headline-optimizer/frontend/js/triggers.min.js?ver=1.2.0'></script>
<script type='text/javascript' src='https://www.dataquest.io/wp-includes/js/imagesloaded.min.js?ver=3.2.0'></script>
<script type='text/javascript' src='https://www.dataquest.io/wp-includes/js/masonry.min.js?ver=3.3.2'></script>
<script type='text/javascript' src='https://www.dataquest.io/wp-includes/js/jquery/jquery.masonry.min.js'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var tve_frontend_options = {"is_editor_page":"","page_events":[],"is_single":"1","ajaxurl":"https:\/\/www.dataquest.io\/wp-admin\/admin-ajax.php","social_fb_app_id":"","dash_url":"https:\/\/www.dataquest.io\/wp-content\/plugins\/thrive-visual-editor\/thrive-dashboard","translations":{"Copy":"Copy"},"post_id":"21420"};
/* ]]> */
</script>
<script type='text/javascript' src='https://www.dataquest.io/wp-content/plugins/thrive-visual-editor/editor/js/dist/frontend.min.js?ver=2.4.5.1'></script>
<script type='text/javascript' src='//www.dataquest.io/wp-content/plugins/thrive-leads/js/frontend.min.js?ver=2.2.6.1'></script>
<script type='text/javascript' src='https://www.dataquest.io/wp-content/plugins/posts-data-table/assets/js/datatables/datatables.min.js?ver=1.10.18'></script>
<script type='text/javascript' src='https://www.dataquest.io/wp-content/plugins/posts-data-table/assets/js/posts-data-table.min.js?ver=1.3'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var ThriveApp = {"ajax_url":"https:\/\/www.dataquest.io\/wp-admin\/admin-ajax.php","lazy_load_comments":"1","comments_loaded":"0","translations":{"ProductDetails":"Product Details"}};
/* ]]> */
</script>
<script type='text/javascript' src='https://www.dataquest.io/wp-content/themes/ignition/js/script.min.js?ver=5.3'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var tve_dash_front = {"ajaxurl":"https:\/\/www.dataquest.io\/wp-admin\/admin-ajax.php","force_ajax_send":"","is_crawler":""};
/* ]]> */
</script>
<script type='text/javascript' src='https://www.dataquest.io/wp-content/plugins/thrive-visual-editor/thrive-dashboard/js/dist/frontend.min.js?ver=2.2.5.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var ThriveApprentice = {"ajax_url":"https:\/\/www.dataquest.io\/wp-admin\/admin-ajax.php","current_post_id":"21420","lang":{"remove_from_fav":"Remove from Favorites","add_to_fav":"Mark as Favorite"},"progress_status":{"new":"new","started":"started","completed":"completed"}};
/* ]]> */
</script>
<script type='text/javascript' src='https://www.dataquest.io/wp-content/themes/ignition/appr/js/thrive-apprentice.js?ver=5.3'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var q2w3_sidebar_options = [{"sidebar":"sidebar-1","margin_top":0,"margin_bottom":0,"stop_id":"dq_footer","screen_max_width":500,"screen_max_height":0,"width_inherit":false,"refresh_interval":1500,"window_load_hook":false,"disable_mo_api":false,"widgets":["custom_html-2","search-3","nav_menu-3","nav_menu-10"]}];
/* ]]> */
</script>
<script type='text/javascript' src='https://www.dataquest.io/wp-content/plugins/q2w3-fixed-widget/js/q2w3-fixed-widget.min.js?ver=5.1.9'></script>
<script type='text/javascript' src='https://www.dataquest.io/wp-content/plugins/ank-prism-for-wp/out/prism-js.min.js?ver=1550607458'></script>
<script type='text/javascript' src='https://www.dataquest.io/wp-includes/js/wp-embed.min.js?ver=5.3'></script>
<script type="text/javascript">/*<![CDATA[*/var THO_Front = THO_Front || {}; THO_Front.data = {"end_of_content_id":"tho-end-content","is_single":true,"log_url":"https:\/\/www.dataquest.io\/wp-json\/tho\/v1\/logs","active_triggers":{"viewport":"thrive_headline"},"log_engagements":[],"post_id":21420,"test_id":0,"const":{"_e_click":1,"_e_scroll":2,"_e_time":3,"_impression":1,"_engagement":2}}/*]]> */</script><script type="text/javascript">var tcb_post_lists=JSON.parse('[]');</script><script type="text/javascript">/*<![CDATA[*/if ( !window.TL_Const ) {var TL_Const={"security":"e37e221f0b","ajax_url":"https:\/\/www.dataquest.io\/wp-admin\/admin-ajax.php","forms":[],"action_conversion":"tve_leads_ajax_conversion","action_impression":"tve_leads_ajax_impression","ajax_load":1,"main_group_id":17187,"display_options":{"allowed_post_types":[],"flag_url_match":false},"shortcode_ids":["19063","11317"],"custom_post_data":{"http_referrer":"https:\/\/www.dataquest.io"},"current_screen":{"screen_type":4,"screen_id":21420},"ignored_fields":["email","_captcha_size","_captcha_theme","_captcha_type","_submit_option","_use_captcha","g-recaptcha-response","__tcb_lg_fc","__tcb_lg_msg","_state","_form_type","_error_message_option","_back_url","_submit_option","url","_asset_group","_asset_option","mailchimp_optin"]};} else {ThriveGlobal.$j.extend(true, TL_Const, {"security":"e37e221f0b","ajax_url":"https:\/\/www.dataquest.io\/wp-admin\/admin-ajax.php","forms":[],"action_conversion":"tve_leads_ajax_conversion","action_impression":"tve_leads_ajax_impression","ajax_load":1,"main_group_id":17187,"display_options":{"allowed_post_types":[],"flag_url_match":false},"shortcode_ids":["19063","11317"],"custom_post_data":{"http_referrer":"https:\/\/www.dataquest.io"},"current_screen":{"screen_type":4,"screen_id":21420},"ignored_fields":["email","_captcha_size","_captcha_theme","_captcha_type","_submit_option","_use_captcha","g-recaptcha-response","__tcb_lg_fc","__tcb_lg_msg","_state","_form_type","_error_message_option","_back_url","_submit_option","url","_asset_group","_asset_option","mailchimp_optin"]})} /*]]> */</script></body>
</html>